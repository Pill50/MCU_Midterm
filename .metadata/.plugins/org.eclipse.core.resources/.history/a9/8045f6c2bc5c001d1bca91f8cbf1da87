/*
 * input_reading.c
 *
 *  Created on: Nov 3, 2022
 *      Author: DELL
 */

#include "main.h"
#include "input_reading.h"

// we aim to work with more than one buttons
#define N0_OF_BUTTONS 					3
#define DURATION_FOR_AUTO_INCREASING 	100
#define DURATION_FOR_DOUBLE_CLICK 		50
#define BUTTON_IS_PRESSED 				GPIO_PIN_RESET
#define BUTTON_IS_RELEASED 				GPIO_PIN_SET

// the buffer that the final result is stored after debouncing
static GPIO_PinState buttonBuffer[N0_OF_BUTTONS];

// we define two buffers for debouncing
static GPIO_PinState debounceButtonBuffer1[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];

// LONG PRESS 1S
static uint16_t buttonPin[N0_OF_BUTTONS] = {RESET_Pin, INC_Pin, DEC_Pin};
static uint8_t flagForButtonPress1s [ N0_OF_BUTTONS ];
static uint16_t counterForButtonPress1s [ N0_OF_BUTTONS ];

// DOUBLE PRESS
static uint8_t flagForDoublePress [ N0_OF_BUTTONS ];
static uint16_t counterForDoublePress [ N0_OF_BUTTONS ];
static uint16_t increase_press_count [ N0_OF_BUTTONS ];
static uint16_t pressCount [ N0_OF_BUTTONS ];


void button_reading_Init(void){
	for (int i = 0; i < N0_OF_BUTTONS; i++){
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
		buttonBuffer[i] = BUTTON_IS_RELEASED;
	}
}

void button_reading(void){
	for(int i = 0; i < N0_OF_BUTTONS; i++){
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, buttonPin[i]);
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
			buttonBuffer[i] = debounceButtonBuffer1[i];
		}
		//BS
		if(buttonBuffer[i] == BUTTON_IS_PRESSED){
			// LONG PRESS START //
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
				counterForButtonPress1s[i]++;
			} else {
				flagForButtonPress1s[i] = 1;
			}
			// LONG PRESS END //
			// DOUBLE PRESS START//
			if(increase_press_count[i] == 0) {
				pressCount[i]++;
				increase_press_count[i] = 1;
			}
			counterForDoublePress[i] = DURATION_FOR_DOUBLE_CLICK;
			if(pressCount[i] == 2) {
				flagForDoublePress[i] = 1;
				pressCount[i] = 0;
			}
			// DOUBLE PRESS END //
		} else {
			// LONG PRESS START //
			counterForButtonPress1s[i] = 0;
			flagForButtonPress1s[i] = 0;
			// LONG PRESS END //
			// DOUBLE PRESS START//
			increase_press_count[i] = 0;
			flagForDoublePress[i] = 0;
			if(pressCount[i] == 1) {
				if(counterForDoublePress[i] > 0) {
					counterForDoublePress[i]--;
				}
				else {
					pressCount[i] = 0;
				}
			}
			// DOUBLE PRESS END //
		}
		//BS
	}
}

unsigned char is_button_pressed(uint8_t index){
	if(index >= N0_OF_BUTTONS) return 0;
	if (buttonBuffer[index] == BUTTON_IS_PRESSED){
		return 1;
	}
	else {
		return 0;
	}
}

unsigned char is_button_pressed_1s(unsigned char index){
	if(index >= N0_OF_BUTTONS) return 0xff;
	return (flagForButtonPress1s[index] == 1);
}

unsigned char is_button_pressed_double(unsigned char index) {
	if(index >= N0_OF_BUTTONS) return 0xff;
	return (flagForDoublePress[index] == 1);
}
